The Classic: PsExec

SysInternals first released PsExec more than a decade ago, and it has provided administrators a reliable method for remotely accessing systems via the Server Message Block (SMB) protocol ever since. The fundamental behavior of PsExec follows a simple pattern:

    Establishes an SMB network connection to a target system using administrator credentials
    Pushes a copy of a receiver process named PSEXESVC.EXE to the target system’s ADMIN$ share
    Launches PSEXESVC.EXE, which sends input and output to a named pipe

In general, a named pipe is a method of interprocess communication, and various specific pipes are common in Windows Active Directory domains. Pipes may be named for specific uses, and, in this case, a pipe for PsExec communication usually looks like this: \\.\pipe\psexesvc. This detail becomes incredibly important when searching for malicious uses of PsExec in your environment because even an evasive, renamed version of PsExec will still use named pipes to communicate. In fact, this behavior is so predictable that we even see it in other software that merely clones the functionality of PsExec. (We’ll come back to this in a moment).

Binary metadata also helps identify renamed instances of PsExec. For the source process establishing a connection, PsExec’s internal name value is simply PsExec, while the target’s receiving process, PsExeSvc.exe, has an internal name of PsExec Service Host. Since PsExec is primarily available as precompiled binaries, these metadata aren’t easily changed and can be handy to determine execution.

In addition to the metadata, a Windows Registry artifact (such as HKEY_CURRENT_USER\software\sysinternals\psexec\eulaaccepted) can indicate when PsExec has been used. Additionally, an admin must accept an End-User License Agreement if they want to use the utility, and the acceptance is written to this key. As with binary metadata and named pipe usage, this will not change if PsExec is renamed, but it can be easily removed by an informed adversary.
Send in the Clones

Since PsExec is easy to use and reliable, it became a natural choice for legit software and adversaries alike, as each needed a way of issuing commands to remote systems. PsExec’s licensure terms, however, do not allow for redistribution within other software packages, which presented a problem for software developers, so now there are a variety of open-source tools that clone the capabilities of PsExec.
RemCom

RemCom is an open-source, redistributable utility providing the same remote management functions. It achieved a level of notoriety after adversaries used it to move laterally in their attack on the Democratic National Committee in 2016. However, it’s also included in several legitimate software packages. By default, RemCom sends RemComSvc.exe to a remote computer, which then uses the named pipe \\.\pipe\remcom_comunication (misspelling and all) in the place of PsExec’s named pipe. In addition, the process’s internal name has a value of remcom.
PAExec

PAExec features all the same functions of RemCom and PsExec, and is primarily intended for use with the PowerAdmin server management solution. By default, PAExec uses a named pipe containing the string PAExec combined with a unique process identifier and computer name values. The receiving process is similarly named and usually has an internal name value of paexec.
CSExec

CSExec is a highly configurable, C# implementation of PsExec’s functionality. By default, CSExec sends csexecsvc.exe to the remote computer and uses a named pipe called \\.\pipe\csexecsvc. The internal name value is readily changeable—although this depends on compilation instructions—but it should contain the string csexec by default either way.

Comparing and contrasting all of these clones, a few things should become apparent:

    All the clones are open-source, with their source-code available to the public
    Adversaries can download the code and recompile it with different values for named pipe names and binary internal names
    Despite this, the underlying functionality for communication will remain the same



Source https://redcanary.com/blog/threat-hunting-psexec-lateral-movement/
